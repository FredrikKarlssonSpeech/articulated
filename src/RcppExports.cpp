// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rPVI
double rPVI(NumericVector x, bool omit);
RcppExport SEXP _articulated_rPVI(SEXP xSEXP, SEXP omitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type omit(omitSEXP);
    rcpp_result_gen = Rcpp::wrap(rPVI(x, omit));
    return rcpp_result_gen;
END_RCPP
}
// nPVI
double nPVI(NumericVector x, bool omit);
RcppExport SEXP _articulated_nPVI(SEXP xSEXP, SEXP omitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type omit(omitSEXP);
    rcpp_result_gen = Rcpp::wrap(nPVI(x, omit));
    return rcpp_result_gen;
END_RCPP
}
// jitter_local
double jitter_local(NumericVector x, double minperiod, double maxperiod, bool absolute, bool omit);
RcppExport SEXP _articulated_jitter_local(SEXP xSEXP, SEXP minperiodSEXP, SEXP maxperiodSEXP, SEXP absoluteSEXP, SEXP omitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type minperiod(minperiodSEXP);
    Rcpp::traits::input_parameter< double >::type maxperiod(maxperiodSEXP);
    Rcpp::traits::input_parameter< bool >::type absolute(absoluteSEXP);
    Rcpp::traits::input_parameter< bool >::type omit(omitSEXP);
    rcpp_result_gen = Rcpp::wrap(jitter_local(x, minperiod, maxperiod, absolute, omit));
    return rcpp_result_gen;
END_RCPP
}
// jitter_ddp
double jitter_ddp(NumericVector x, int minperiod, int maxperiod, bool absolute, bool omit);
RcppExport SEXP _articulated_jitter_ddp(SEXP xSEXP, SEXP minperiodSEXP, SEXP maxperiodSEXP, SEXP absoluteSEXP, SEXP omitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type minperiod(minperiodSEXP);
    Rcpp::traits::input_parameter< int >::type maxperiod(maxperiodSEXP);
    Rcpp::traits::input_parameter< bool >::type absolute(absoluteSEXP);
    Rcpp::traits::input_parameter< bool >::type omit(omitSEXP);
    rcpp_result_gen = Rcpp::wrap(jitter_ddp(x, minperiod, maxperiod, absolute, omit));
    return rcpp_result_gen;
END_RCPP
}
// jitter_rap
double jitter_rap(NumericVector x, int minperiod, int maxperiod, bool absolute, bool omit);
RcppExport SEXP _articulated_jitter_rap(SEXP xSEXP, SEXP minperiodSEXP, SEXP maxperiodSEXP, SEXP absoluteSEXP, SEXP omitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type minperiod(minperiodSEXP);
    Rcpp::traits::input_parameter< int >::type maxperiod(maxperiodSEXP);
    Rcpp::traits::input_parameter< bool >::type absolute(absoluteSEXP);
    Rcpp::traits::input_parameter< bool >::type omit(omitSEXP);
    rcpp_result_gen = Rcpp::wrap(jitter_rap(x, minperiod, maxperiod, absolute, omit));
    return rcpp_result_gen;
END_RCPP
}
// jitter_ppq5
double jitter_ppq5(NumericVector x, int minperiod, int maxperiod, bool absolute, bool omit);
RcppExport SEXP _articulated_jitter_ppq5(SEXP xSEXP, SEXP minperiodSEXP, SEXP maxperiodSEXP, SEXP absoluteSEXP, SEXP omitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type minperiod(minperiodSEXP);
    Rcpp::traits::input_parameter< int >::type maxperiod(maxperiodSEXP);
    Rcpp::traits::input_parameter< bool >::type absolute(absoluteSEXP);
    Rcpp::traits::input_parameter< bool >::type omit(omitSEXP);
    rcpp_result_gen = Rcpp::wrap(jitter_ppq5(x, minperiod, maxperiod, absolute, omit));
    return rcpp_result_gen;
END_RCPP
}
// cppRelStab
double cppRelStab(NumericVector x, int start, int end, bool omit);
RcppExport SEXP _articulated_cppRelStab(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP, SEXP omitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< bool >::type omit(omitSEXP);
    rcpp_result_gen = Rcpp::wrap(cppRelStab(x, start, end, omit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_articulated_rPVI", (DL_FUNC) &_articulated_rPVI, 2},
    {"_articulated_nPVI", (DL_FUNC) &_articulated_nPVI, 2},
    {"_articulated_jitter_local", (DL_FUNC) &_articulated_jitter_local, 5},
    {"_articulated_jitter_ddp", (DL_FUNC) &_articulated_jitter_ddp, 5},
    {"_articulated_jitter_rap", (DL_FUNC) &_articulated_jitter_rap, 5},
    {"_articulated_jitter_ppq5", (DL_FUNC) &_articulated_jitter_ppq5, 5},
    {"_articulated_cppRelStab", (DL_FUNC) &_articulated_cppRelStab, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_articulated(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
